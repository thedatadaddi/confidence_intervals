[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/scala/vscode/hw3_ex14/src/main/scala/hw3/CH3.13-EX14/ci.scala","languageId":"scala","version":1,"text":"\n\n///////////////////////////////////////////// \n//INCLUDING SCALATION ON A NEW PROJECT\n/////////////////////////////////////////////\n\n\n/*\n\nMethod 1: Use a copy of Dr. Miller pre provided file my_scalation_2.0 from his webpage. Then change make a new scala class file in the package dir and edit there. \n\nMethod 2: Start from hello world boiler plate template. Create a new dir under the main project folder called \"lib\" that has the \"scalation_3-0.1.0-SNAPSHOT.jar\" file in it.\nyou then need to navigate to \".bloop/root/\". From here thre should be a \"root-test.json\" and a \"root.json file\". For both of these files you must add in a classpath so that Scala knows\nhow to access the scalation jar file. For example, I would add \"/Users/sdk/Desktop/my_scalation_2.0/lib/scalation_3-0.1.0-SNAPSHOT.jar\" as another element under the classpath json attribute. \n\n*/\n\n\n//// HW3 Chapter 3.13 Exercise 14 \n\n\npackage hw3\n\nimport scala.math.sqrt\nimport scala.language.postfixOps\nimport java.io._\n\nimport scalation._\nimport scalation.mathstat._\nimport scalation.random._\n\n\ndef confidenceIntervalTest (s_size:Int): Unit =\n\n  val (mu, sig) = (70.0, 8.0) // pop. mean and standard deviation\n  val m = s_size // sample size\n  val rm = sqrt (m)\n  val rvg = Normal (mu, sig * sig) // Normal random variate generator\n  var count_z, count_t = 0\n\n  for it <- 1 to 100 do // test several datasets\n\n    val y = VectorD (for i <- 0 until m yield rvg.gen) // sample from Normal distribution\n    val (mu_, sig_) = (y.mean, y.stdev) // sample mean and standard deviation\n\n    val ihw_z = z_sigma (sig_) / rm // interval half width: z-distribution\n    val ci_z = (mu_ - ihw_z, mu_ + ihw_z) // z-confidence interval\n    println (s\"mu = $mu in ci_z = $ci_z?\")\n\n    if mu in ci_z then count_z += 1\n\n    val ihw_t = t_sigma (sig_, m-1) / rm // interval half width: t-distribution\n    val ci_t = (mu_ - ihw_t, mu_ + ihw_t) // z-confidence interval\n    println (s\"mu = $mu in ci_t = $ci_t?\")\n\n    if mu in ci_t then count_t += 1\n\n    // val writer2 = new FileWriter(new File(\"./src/main/scala/hw3/output/ci_test_data.csv\"), true)\n    // writer2.write(s\"$s_size, ${ci_z(0)}, ${ci_z(1)}, ${ci_t(0)}, ${ci_t(1)}\\n\")\n    // writer2.close()\n\n  end for\n\n  println (s\"mu inside $count_z % z-confidence intervals\")\n  println (s\"mu inside $count_t % t-confidence intervals\")\n\n  // println(s\"$s_size, $count_z, $count_t\")\n\n  val writer = new FileWriter(new File(\"./src/main/scala/hw3/output/count_test_data.csv\"), true)\n  writer.write(s\"$s_size, $count_z, $count_t\\n\")\n  writer.close()\n\n\n\n\n\nend confidenceIntervalTest\n\n\nobject testCI extends App:\n\n  // val tmp1 = 20 to 40 by 1 toList\n\n  // val tmp2 = List(60, 80, 100)\n\n  // val tests = tmp1 ::: tmp2\n\n  val tests = 10 to 100 by 1 toList\n\n  val writer = new FileWriter(new File(\"./src/main/scala/hw3/output/count_test_data.csv\"))\n  writer.write(s\"m, z-dist, t-dist\\n\")\n  writer.close()  \n  \n  // val writer2 = new FileWriter(new File(\"./src/main/scala/hw3/output/ci_test_data.csv\"))\n  // writer2.write(s\"m, z-ci-st, z-ci-end, t-ci-st, t-ci-end\\n\")\n  // writer2.close()\n\n  for (test <- tests) confidenceIntervalTest(test)\n\nend testCI"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/sdk/Desktop/scala/vscode/hw3_ex14/target/scala-3.1.0/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Feb 8, 2022, 10:54:41 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
